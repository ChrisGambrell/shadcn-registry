{
  "name": "auth-block",
  "type": "registry:block",
  "dependencies": [
    "@auth/prisma-adapter",
    "@cgambrell/utils",
    "@mdx-js/loader",
    "@mdx-js/react",
    "@next/mdx",
    "@prisma/client",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@t3-oss/env-nextjs",
    "@types/mdx",
    "bcryptjs",
    "next-auth@beta",
    "react-hot-toast",
    "zod"
  ],
  "devDependencies": [
    "@types/bcryptjs",
    "prisma"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "./.env.example",
      "content": "AUTH_SECRET=\"\"\n\nAUTH_GITHUB_ID=\"\"\nAUTH_GITHUB_SECRET=\"\"\n\nAUTH_GOOGLE_ID=\"\"\nAUTH_GOOGLE_SECRET=\"\"\n\nAUTH_RESEND_KEY=\"\"\nAUTH_RESEND_EMAIL=\"noreply@example.com\"\n\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/postgres?schema=public\"\n\nNEXT_PUBLIC_SITE_URL=\"http://127.0.0.1:3000\"",
      "type": "registry:example",
      "target": "~/.env.example"
    },
    {
      "path": "./.eslintrc.json",
      "content": "{\n\t\"extends\": [\"next/core-web-vitals\", \"next/typescript\"],\n\t\"rules\": {\n\t\t\"@typescript-eslint/no-empty-object-type\": \"warn\"\n\t}\n}\n",
      "type": "registry:example",
      "target": "~/.eslintrc.json"
    },
    {
      "path": "./.gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n.env\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n",
      "type": "registry:example",
      "target": "~/.gitignore"
    },
    {
      "path": "./actions/auth.ts",
      "content": "'use server'\n\nimport { signIn, signOut } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { loginSchema, registerSchema, verifyEmailSchema } from '@/validators/auth'\nimport { getErrorRedirect, getSuccessRedirect, parseFormData } from '@cgambrell/utils'\nimport { Prisma } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { AuthError } from 'next-auth'\nimport { BuiltInProviderType } from 'next-auth/providers'\nimport { redirect } from 'next/navigation'\n\nexport async function login(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, loginSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tawait signIn('credentials', { email: data.email, password: data.password, redirectTo: '/' })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/login', error.cause?.err?.message))\n\t\tthrow error\n\t}\n}\n\nexport async function logout() {\n\tawait signOut({ redirectTo: '/login' })\n}\n\nexport async function oauth(provider: BuiltInProviderType) {\n\ttry {\n\t\tawait signIn(provider, { redirectTo: '/' })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/login', error.cause?.err?.message))\n\t\tthrow error\n\t}\n}\n\nexport async function register(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, registerSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\t\tawait prisma.user.create({ data: { name: `${data.firstName} ${data.lastName}`, email: data.email, passwordHash } })\n\t} catch (error) {\n\t\tif (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002')\n\t\t\treturn { errors: { email: ['User already exists with that email'] } }\n\t\telse if (error instanceof AuthError) redirect(getErrorRedirect('/register', error.cause?.err?.message))\n\t\tthrow error\n\t}\n\n\tredirect(getSuccessRedirect('/login', 'Account created, please login'))\n}\n\nexport async function verifyEmail(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, verifyEmailSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tawait signIn('resend', { email: data.email, redirect: false })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/forgot', error.cause?.err?.message))\n\t\tthrow error\n\t}\n\n\tredirect(getSuccessRedirect('/login', 'A sign in link has been sent to your email address.'))\n}\n",
      "type": "registry:example",
      "target": "~/actions/auth.ts"
    },
    {
      "path": "./app/(auth)/forgot/client.tsx",
      "content": "'use client'\n\nimport { verifyEmail } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(verifyEmail, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Email address' name='email' placeholder='name@example.com' type='email' error={state?.errors.email} />\n\t\t\t<ActionButton>Send magic link</ActionButton>\n\t\t</form>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/forgot/client.tsx"
    },
    {
      "path": "./app/(auth)/forgot/page.tsx",
      "content": "import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport default function ForgotPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/login'>\n\t\t\t\tLogin\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Forgot your password?</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to get a magic link.</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/forgot/page.tsx"
    },
    {
      "path": "./app/(auth)/layout.tsx",
      "content": "import { MOCK_APP_ICON, MOCK_APP_NAME, MOCK_AUTH_FEATURE, MOCK_TESTIMONIAL } from '@/lib/constants'\nimport { LayoutProps } from '@cgambrell/utils'\nimport Image from 'next/image'\n\nexport default function AuthLayout({ children }: LayoutProps) {\n\treturn (\n\t\t<div className='relative flex-col items-center justify-center grid lg:max-w-none lg:h-screen lg:grid-cols-2 lg:px-0'>\n\t\t\t<div className='relative hidden h-full flex-col bg-muted p-10 text-white dark:border-r lg:flex'>\n\t\t\t\t<div className='absolute inset-0'>\n\t\t\t\t\t<Image className='w-full h-full object-cover' src={MOCK_AUTH_FEATURE} alt='auth-feature' width={1000} height={1000} />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative z-20 flex items-center text-lg font-medium'>\n\t\t\t\t\t<MOCK_APP_ICON className='mr-2 h-6 w-6' />\n\t\t\t\t\t<span>{MOCK_APP_NAME}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='relative z-20 mt-auto'>\n\t\t\t\t\t<blockquote className='space-y-2'>\n\t\t\t\t\t\t<p className='text-lg'>&ldquo;{MOCK_TESTIMONIAL.quote}&rdquo;</p>\n\t\t\t\t\t\t<footer className='text-sm'>{MOCK_TESTIMONIAL.name}</footer>\n\t\t\t\t\t</blockquote>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='px-4 pt-24 lg:p-8'>{children}</div>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/layout.tsx"
    },
    {
      "path": "./app/(auth)/login/client.tsx",
      "content": "'use client'\n\nimport { login, oauth } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(login, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Email address' name='email' placeholder='name@example.com' type='email' error={state?.errors.email} />\n\t\t\t<FormInput label='Password' name='password' type='password' error={state?.errors.password} />\n\t\t\t<ActionButton>Sign In with Email</ActionButton>\n\n\t\t\t<div className='relative'>\n\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or continue with</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='grid gap-2'>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'google')} variant='outline'>\n\t\t\t\t\tLogin with Google\n\t\t\t\t</ActionButton>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'github')} variant='outline'>\n\t\t\t\t\tLogin with Github\n\t\t\t\t</ActionButton>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/login/client.tsx"
    },
    {
      "path": "./app/(auth)/login/page.tsx",
      "content": "import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport default function LoginPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/register'>\n\t\t\t\tRegister\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Sign in to your account</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to sign in to your account</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tForgot your password?{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/forgot'>\n\t\t\t\t\t\tGet help\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tBy clicking continue, you agree to our{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/terms'>\n\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t</Link>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/privacy'>\n\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/login/page.tsx"
    },
    {
      "path": "./app/(auth)/privacy/page.mdx",
      "content": "{/* BUG: Can't access this outside of auth */}\n{/* TODO: Real privacy policy */}\n\n**Privacy Notice**\n\n_Last Updated: [Date]_\n\n---\n\n**1. Introduction**\n\nWelcome to [Your Company] (\"we,\" \"us,\" or \"our\"). This Privacy Notice describes how we collect, use, disclose, and safeguard your personal information when you use our services, including our website and any related applications (collectively, the \"Service\").\n\n**2. Information We Collect**\n\n-   **Personal Data:** We may collect personally identifiable information such as your name, email address, phone number, and mailing address when you register for an account, subscribe to a newsletter, or fill out a form.\n\n-   **Usage Data:** We collect information on how you access and use the Service (\"Usage Data\"). This may include your IP address, browser type, pages visited, time and date of visit, and other diagnostic data.\n\n-   **Cookies and Tracking Technologies:** We use cookies, web beacons, and similar tracking technologies to track the activity on our Service and hold certain information.\n\n**3. How We Use Your Information**\n\nWe use the collected data for various purposes:\n\n-   **To Provide and Maintain the Service:** Ensuring the Service functions correctly and providing customer support.\n\n-   **To Notify You of Changes:** Informing you about updates or changes to our Service.\n\n-   **To Allow Participation in Interactive Features:** Enabling you to participate in interactive features when you choose to do so.\n\n-   **To Monitor Usage:** Tracking and analyzing usage and trends to improve user experience.\n\n-   **To Communicate with You:** Sending newsletters, marketing materials, and other information that may be of interest to you.\n\n**4. Disclosure of Your Information**\n\n-   **Business Transactions:** If we are involved in a merger, acquisition, or asset sale, your personal data may be transferred.\n\n-   **Legal Requirements:** We may disclose your information if required to do so by law or in response to valid requests by public authorities.\n\n-   **Third-Party Service Providers:** We may employ third-party companies to facilitate our Service, perform Service-related services, or assist us in analyzing how our Service is used.\n\n**5. Security of Your Information**\n\nWe value your trust in providing us your personal information and strive to use commercially acceptable means of protecting it. However, no method of transmission over the internet or electronic storage is 100% secure.\n\n**6. Your Rights**\n\nDepending on your jurisdiction, you may have the following data protection rights:\n\n-   **Access:** Request access to the personal data we hold about you.\n\n-   **Correction:** Request correction of any inaccurate or incomplete data.\n\n-   **Deletion:** Request deletion of your personal data under certain circumstances.\n\n-   **Opt-Out:** Opt-out of receiving marketing communications from us.\n\n**7. Children's Privacy**\n\nOur Service is not intended for individuals under the age of [Minimum Age]. We do not knowingly collect personally identifiable information from anyone under this age.\n\n**8. International Data Transfers**\n\nYour information, including personal data, may be transferred to—and maintained on—computers located outside of your state, province, country, or other governmental jurisdiction where data protection laws may differ.\n\n**9. Changes to This Privacy Notice**\n\nWe may update our Privacy Notice from time to time. Any changes will be posted on this page with an updated \"Last Updated\" date.\n\n**10. Contact Us**\n\nIf you have any questions or concerns about this Privacy Notice, please contact us at:\n\n-   **Email:** [Your Email Address]\n-   **Mailing Address:** [Your Mailing Address]\n-   **Phone Number:** [Your Contact Number]\n\n---\n\n_Please customize this Privacy Notice to suit your specific needs and consult with a legal professional to ensure compliance with all applicable laws and regulations._\n",
      "type": "registry:example",
      "target": "./app/(auth)/privacy/page.mdx"
    },
    {
      "path": "./app/(auth)/register/client.tsx",
      "content": "'use client'\n\nimport { oauth, register } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(register, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-y-4 gap-x-2 grid-cols-2'>\n\t\t\t<FormInput label='First name' name='firstName' placeholder='Max' error={state?.errors.firstName} />\n\t\t\t<FormInput label='Last name' name='lastName' placeholder='Robinson' error={state?.errors.lastName} />\n\t\t\t<FormInput\n\t\t\t\tclassName='col-span-full'\n\t\t\t\tlabel='Email address'\n\t\t\t\tname='email'\n\t\t\t\tplaceholder='name@example.com'\n\t\t\t\ttype='email'\n\t\t\t\terror={state?.errors.email}\n\t\t\t/>\n\t\t\t<FormInput label='Password' name='password' type='password' error={state?.errors.password} />\n\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' error={state?.errors.confirmPassword} />\n\t\t\t<ActionButton className='col-span-full'>Sign In with Email</ActionButton>\n\n\t\t\t<div className='relative col-span-full'>\n\t\t\t\t<div className='absolute inset-0 flex items-center'>\n\t\t\t\t\t<span className='w-full border-t' />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative flex justify-center text-xs uppercase'>\n\t\t\t\t\t<span className='bg-background px-2 text-muted-foreground'>Or continue with</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='grid gap-2 col-span-full'>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'google')} variant='outline'>\n\t\t\t\t\tLogin with Google\n\t\t\t\t</ActionButton>\n\t\t\t\t<ActionButton formAction={oauth.bind(null, 'github')} variant='outline'>\n\t\t\t\t\tLogin with Github\n\t\t\t\t</ActionButton>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/register/client.tsx"
    },
    {
      "path": "./app/(auth)/register/page.tsx",
      "content": "import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport default function RegisterPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/login'>\n\t\t\t\tLogin\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Create an account</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to create your account</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tBy clicking continue, you agree to our{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/terms'>\n\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t</Link>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/privacy'>\n\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/register/page.tsx"
    },
    {
      "path": "./app/(auth)/terms/page.mdx",
      "content": "{/* BUG: Can't access this outside of auth */}\n{/* TODO: Real terms of service */}\n\n**Terms of Service**\n\n_Last Updated: [Date]_\n\n**1. Acceptance of Terms**\n\nBy accessing or using our services, you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to all the terms and conditions, then you may not access the service.\n\n**2. Modification of Terms**\n\nWe reserve the right to modify or replace these Terms at any time. It is your responsibility to check this page periodically for changes. Your continued use of the service after any such changes constitutes acceptance of those changes.\n\n**3. Eligibility**\n\nYou must be at least [Minimum Age] years old to use our services. By using the service, you represent and warrant that you meet this eligibility requirement.\n\n**4. User Accounts**\n\n-   **Account Responsibility:** You are responsible for maintaining the confidentiality of your account and password.\n-   **Account Security:** You agree to notify us immediately of any unauthorized use of your account.\n\n**5. Use of the Service**\n\n-   **Prohibited Activities:** You agree not to engage in any activities that violate any applicable laws or regulations.\n-   **User Content:** You retain ownership of any content you submit but grant us a license to use, display, and distribute such content.\n\n**6. Intellectual Property**\n\nAll content and materials on the service are the property of [Your Company] or its licensors and are protected by intellectual property laws.\n\n**7. Third-Party Links**\n\nOur service may contain links to third-party websites or services that are not owned or controlled by us. We assume no responsibility for the content or practices of any third-party sites.\n\n**8. Termination**\n\nWe may terminate or suspend your account immediately, without prior notice, for any reason whatsoever, including but not limited to a breach of the Terms.\n\n**9. Limitation of Liability**\n\nIn no event shall [Your Company], nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect or consequential damages arising out of your use of the service.\n\n**10. Indemnification**\n\nYou agree to defend, indemnify, and hold harmless [Your Company] and its affiliates from any claims, damages, or demands arising out of your use of the service.\n\n**11. Governing Law**\n\nThese Terms shall be governed and construed in accordance with the laws of [Jurisdiction], without regard to its conflict of law provisions.\n\n**12. Dispute Resolution**\n\nAny disputes arising out of these Terms shall be resolved through [Arbitration/Court] in [Jurisdiction].\n\n**13. Severability**\n\nIf any provision of these Terms is held to be unenforceable, the remaining provisions shall remain in effect.\n\n**14. Entire Agreement**\n\nThese Terms constitute the entire agreement between us regarding our service and supersede any prior agreements.\n\n**15. Contact Us**\n\nIf you have any questions about these Terms, please contact us at [Contact Information].\n\n---\n\n_Please customize these Terms of Service to suit your specific needs and consult with a legal professional to ensure compliance with all applicable laws and regulations._\n",
      "type": "registry:example",
      "target": "./app/(auth)/terms/page.mdx"
    },
    {
      "path": "./app/api/auth/[...nextauth]/route.ts",
      "content": "import { handlers } from '@/lib/auth'\nexport const { GET, POST } = handlers\n",
      "type": "registry:example",
      "target": "./app/api/auth/[...nextauth]/route.ts"
    },
    {
      "path": "./app/layout.tsx",
      "content": "import { GlobalToaster } from '@/components/global-toaster'\nimport type { Metadata } from 'next'\nimport localFont from 'next/font/local'\nimport { Suspense } from 'react'\nimport './globals.css'\n\n// Import to verify environment variables are set\nimport '@/lib/env'\n\nconst geistSans = localFont({\n\tsrc: './fonts/GeistVF.woff',\n\tvariable: '--font-geist-sans',\n\tweight: '100 900',\n})\nconst geistMono = localFont({\n\tsrc: './fonts/GeistMonoVF.woff',\n\tvariable: '--font-geist-mono',\n\tweight: '100 900',\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Create Next App',\n\tdescription: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en'>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n\t\t\t\t{children}\n\t\t\t\t<Suspense>\n\t\t\t\t\t<GlobalToaster />\n\t\t\t\t</Suspense>\n\t\t\t</body>\n\t\t</html>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/layout.tsx"
    },
    {
      "path": "./app/page.tsx",
      "content": "import { logout } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { Card, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { auth } from '@/lib/auth'\nimport { LogOutIcon } from 'lucide-react'\n\nexport default async function RootPage() {\n\tconst user = await auth()\n\n\treturn (\n\t\t<Card className='mx-auto max-w-sm mt-4 sm:mt-12 md:mt-20 lg:mt-24 xl:mt-28 w-full border-0 shadow-none sm:border sm:shadow-sm'>\n\t\t\t<CardHeader>\n\t\t\t\t<CardTitle>{user.name ? `Hello, ${user.name}` : 'Welcome!'}</CardTitle>\n\t\t\t</CardHeader>\n\t\t\t<CardFooter>\n\t\t\t\t<form action={logout} className='w-full'>\n\t\t\t\t\t<ActionButton className='w-full' variant='destructive'>\n\t\t\t\t\t\t<LogOutIcon className='size-4 mr-2' />\n\t\t\t\t\t\t<span>Sign out</span>\n\t\t\t\t\t</ActionButton>\n\t\t\t\t</form>\n\t\t\t</CardFooter>\n\t\t</Card>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/page.tsx"
    },
    {
      "path": "./components/action-button.tsx",
      "content": "'use client'\n\nimport { Loader2Icon } from 'lucide-react'\nimport { useFormStatus } from 'react-dom'\nimport { cn } from '../lib/utils'\nimport { Button, ButtonProps } from './ui/button'\n\nexport function ActionButton({ children, className, disabled, ...props }: ButtonProps) {\n\tconst { pending } = useFormStatus()\n\n\treturn (\n\t\t<Button className={cn('relative', className)} disabled={disabled || pending} type='submit' {...props}>\n\t\t\t<span className={cn('flex items-center', { invisible: pending })}>{children}</span>\n\t\t\t{pending && (\n\t\t\t\t<div className='absolute m-auto'>\n\t\t\t\t\t<Loader2Icon className='size-5 animate-spin' />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Button>\n\t)\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/form-error.tsx",
      "content": "'use client'\n\nimport { useEffect } from 'react'\nimport toast from 'react-hot-toast'\n\nexport function FormError({ hidden = false, value }: { hidden?: boolean; value: string[] | undefined }) {\n\tuseEffect(() => {\n\t\tif (!hidden) return\n\t\tif (value?.length && value.length > 0) toast.error(`FATAL: ${value[0]}`)\n\t}, [hidden, value])\n\n\tif (hidden || !value || !value.length) return null\n\treturn <div className='text-sm text-destructive'>{value[0]}</div>\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/form-input.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { FormError } from './form-error'\nimport { Input, InputProps } from './ui/input'\nimport { Label } from './ui/label'\n\ntype FormInputProps = InputProps & { error?: string[]; label: string }\n\nexport function FormInput({ className, error, id, label, name, ...props }: FormInputProps) {\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && <Label htmlFor={id ?? name}>{label}</Label>}\n\t\t\t<Input id={id ?? name} name={name ?? id} {...props} />\n\t\t\t<FormError value={error} />\n\t\t</div>\n\t)\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/global-toaster.tsx",
      "content": "'use client'\n\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation'\nimport { useEffect } from 'react'\nimport toast, { Toaster } from 'react-hot-toast'\n\nexport function GlobalToaster() {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst searchParams = useSearchParams()\n\n\tuseEffect(() => {\n\t\tconst message = searchParams.get('message')\n\t\tconst error = searchParams.get('error')\n\t\tconst success = searchParams.get('success')\n\n\t\tif (!message && !error && !success) return\n\t\tconst toastType = message ? toast : success ? toast.success : toast.error\n\t\ttoastType(message ? message : success ? success : error)\n\n\t\tconst newSearchParams = new URLSearchParams(searchParams.toString())\n\t\tconst paramsToRemove = ['message', 'error', 'success']\n\t\tparamsToRemove.forEach((param) => newSearchParams.delete(param))\n\t\tconst redirectPath = `${pathname}?${newSearchParams.toString()}`\n\t\trouter.replace(redirectPath, { scroll: false })\n\t}, [searchParams])\n\n\treturn <Toaster />\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./docker-compose.yml",
      "content": "version: '3.9'\n\nservices:\n    db:\n        image: postgres\n        ports:\n            - '5432:5432'\n        restart: always\n        shm_size: 128mb\n        environment:\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: postgres\n",
      "type": "registry:example",
      "target": "~/docker-compose.yml"
    },
    {
      "path": "./lib/auth.ts",
      "content": "import { loginSchema } from '@/validators/auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport bcrypt from 'bcryptjs'\nimport NextAuth, { NextAuthConfig } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport Github from 'next-auth/providers/github'\nimport Google from 'next-auth/providers/google'\nimport Resend from 'next-auth/providers/resend'\nimport prisma from './db'\nimport { env } from './env'\n\nexport const authConfig = {\n\tadapter: PrismaAdapter(prisma),\n\tcallbacks: {\n\t\tauthorized: ({ auth, request: { nextUrl } }) => {\n\t\t\tconst isAuthed = !!auth?.user\n\t\t\tconst isAuthRoute =\n\t\t\t\tnextUrl.pathname.startsWith('/login') || nextUrl.pathname.startsWith('/register') || nextUrl.pathname.startsWith('/forgot')\n\n\t\t\tif (!isAuthRoute) {\n\t\t\t\tif (isAuthed) return true\n\t\t\t\treturn false\n\t\t\t} else if (isAuthed) return Response.redirect(new URL('/', nextUrl))\n\t\t\treturn true\n\t\t},\n\t},\n\tpages: { signIn: '/login' },\n\tproviders: [\n\t\tCredentials({\n\t\t\tcredentials: { email: {}, password: {} },\n\t\t\tauthorize: async (credentials) => {\n\t\t\t\tconst { email, password } = await loginSchema.parseAsync(credentials)\n\t\t\t\tconst user = await prisma.user.findUnique({ where: { email } })\n\n\t\t\t\tif (!user) throw new Error('User not found')\n\t\t\t\telse if (!user.passwordHash) throw new Error('User does not have a password')\n\t\t\t\telse if (!(await bcrypt.compare(password, user.passwordHash))) throw new Error('Password does not match')\n\n\t\t\t\treturn user\n\t\t\t},\n\t\t}),\n\t\tGithub({ allowDangerousEmailAccountLinking: true }),\n\t\tGoogle({ allowDangerousEmailAccountLinking: true }),\n\t\t// BUG: Need to have better email that's being sent\n\t\tResend({ from: env.AUTH_RESEND_EMAIL }),\n\t],\n\tsession: { strategy: 'jwt' },\n} satisfies NextAuthConfig\n\nexport const { handlers, auth: session, signIn, signOut } = NextAuth(authConfig)\n\nexport const auth = async () => {\n\tconst session = await NextAuth(authConfig).auth()\n\tif (!session?.user) throw new Error('Not authenticated.')\n\n\tconst user = await prisma.user.findFirst({ where: { email: session.user.email ?? '' } })\n\tif (!user) throw new Error('User not found')\n\n\treturn user\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/constants.ts",
      "content": "import { Icons } from './icons'\n\n// TODO: Real app name and icon\nexport const MOCK_APP_NAME = 'Next.js Boilerplate'\nexport const MOCK_APP_ICON = Icons.logo\n\n// TODO: Real auth feature\nexport const MOCK_AUTH_FEATURE =\n\t'https://images.unsplash.com/photo-1499914567823-c240485cb7d1?q=80&w=2970&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'\n\n// TODO: Real testimonial\nexport const MOCK_TESTIMONIAL = {\n\tname: 'Sofia Davis',\n\tquote: 'This library has saved me countless hours of work and helped me deliver stunning designs to my clients faster than ever before.',\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/db.ts",
      "content": "import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n\treturn new PrismaClient()\n}\n\ndeclare const globalThis: {\n\tprismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/env.ts",
      "content": "import { createEnv } from '@t3-oss/env-nextjs'\nimport { z } from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tAUTH_SECRET: z.string().min(1),\n\n\t\tAUTH_GITHUB_ID: z.string().min(1),\n\t\tAUTH_GITHUB_SECRET: z.string().min(1),\n\n\t\tAUTH_GOOGLE_ID: z.string().min(1),\n\t\tAUTH_GOOGLE_SECRET: z.string().min(1),\n\n\t\tAUTH_RESEND_KEY: z.string().min(1),\n\t\tAUTH_RESEND_EMAIL: z.string().email(),\n\n\t\tDATABASE_URL: z.string().url(),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_SITE_URL: z.string().url(),\n\t},\n\truntimeEnv: {\n\t\tAUTH_SECRET: process.env.AUTH_SECRET,\n\n\t\tAUTH_GITHUB_ID: process.env.AUTH_GITHUB_ID,\n\t\tAUTH_GITHUB_SECRET: process.env.AUTH_GITHUB_SECRET,\n\n\t\tAUTH_GOOGLE_ID: process.env.AUTH_GOOGLE_ID,\n\t\tAUTH_GOOGLE_SECRET: process.env.AUTH_GOOGLE_SECRET,\n\n\t\tAUTH_RESEND_KEY: process.env.AUTH_RESEND_KEY,\n\t\tAUTH_RESEND_EMAIL: process.env.AUTH_RESEND_EMAIL,\n\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t},\n})\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/icons.ts",
      "content": "import { CommandIcon } from 'lucide-react'\n\nexport const Icons = {\n\tlogo: CommandIcon,\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./mdx-components.tsx",
      "content": "import type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n\treturn {\n\t\t...components,\n\t}\n}\n",
      "type": "registry:example",
      "target": "~/mdx-components.tsx"
    },
    {
      "path": "./middleware.ts",
      "content": "import NextAuth from 'next-auth'\nimport { authConfig } from './lib/auth'\n\nexport default NextAuth(authConfig).auth\nexport const config = {\n\tmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n",
      "type": "registry:example",
      "target": "~/middleware.ts"
    },
    {
      "path": "./next.config.mjs",
      "content": "import createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n\timages: {\n\t\tremotePatterns: [\n\t\t\t{\n\t\t\t\thostname: 'images.unsplash.com',\n\t\t\t},\n\t\t],\n\t},\n\tpageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n}\n\nconst withMDX = createMDX()\nexport default withMDX(nextConfig)\n",
      "type": "registry:example",
      "target": "~/next.config.mjs"
    },
    {
      "path": "./prisma/migrations/20241009173543_add_auth/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"name\" TEXT,\n    \"email\" TEXT NOT NULL,\n    \"image\" TEXT,\n    \"emailVerified\" TIMESTAMP(3),\n    \"passwordHash\" TEXT,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Account\" (\n    \"userId\" TEXT NOT NULL,\n    \"type\" TEXT NOT NULL,\n    \"provider\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"refresh_token\" TEXT,\n    \"access_token\" TEXT,\n    \"expires_at\" INTEGER,\n    \"token_type\" TEXT,\n    \"scope\" TEXT,\n    \"id_token\" TEXT,\n    \"session_state\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Account_pkey\" PRIMARY KEY (\"provider\",\"providerAccountId\")\n);\n\n-- CreateTable\nCREATE TABLE \"Session\" (\n    \"sessionToken\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL\n);\n\n-- CreateTable\nCREATE TABLE \"VerificationToken\" (\n    \"identifier\" TEXT NOT NULL,\n    \"token\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"VerificationToken_pkey\" PRIMARY KEY (\"identifier\",\"token\")\n);\n\n-- CreateTable\nCREATE TABLE \"Authenticator\" (\n    \"credentialID\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"credentialPublicKey\" TEXT NOT NULL,\n    \"counter\" INTEGER NOT NULL,\n    \"credentialDeviceType\" TEXT NOT NULL,\n    \"credentialBackedUp\" BOOLEAN NOT NULL,\n    \"transports\" TEXT,\n\n    CONSTRAINT \"Authenticator_pkey\" PRIMARY KEY (\"userId\",\"credentialID\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Session_sessionToken_key\" ON \"Session\"(\"sessionToken\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Authenticator_credentialID_key\" ON \"Authenticator\"(\"credentialID\");\n\n-- AddForeignKey\nALTER TABLE \"Account\" ADD CONSTRAINT \"Account_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Session\" ADD CONSTRAINT \"Session_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Authenticator\" ADD CONSTRAINT \"Authenticator_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241009173543_add_auth/migration.sql"
    },
    {
      "path": "./prisma/migrations/migration_lock.toml",
      "content": "# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"postgresql\"",
      "type": "registry:example",
      "target": "~/prisma/migrations/migration_lock.toml"
    },
    {
      "path": "./prisma/schema.prisma",
      "content": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  name  String?\n  email String  @unique\n  image String?\n\n  emailVerified DateTime?\n  passwordHash  String?\n\n  accounts      Account[]\n  sessions      Session[]\n  // Optional for WebAuthn support\n  Authenticator Authenticator[]\n}\n\nmodel Account {\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([provider, providerAccountId])\n}\n\nmodel Session {\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@id([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n  credentialID         String  @unique\n  userId               String\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([userId, credentialID])\n}\n",
      "type": "registry:example",
      "target": "~/prisma/schema.prisma"
    },
    {
      "path": "./registry.json",
      "content": "",
      "type": "registry:example",
      "target": "~/registry.json"
    },
    {
      "path": "./validators/auth.ts",
      "content": "import { z } from 'zod'\n\nexport const loginSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n\tpassword: z.string({ required_error: 'Password is required' }).min(1, { message: 'Password is required' }),\n})\n\nexport const registerSchema = z\n\t.object({\n\t\tfirstName: z.string({ required_error: 'First name is required' }).min(1, { message: 'First name is required' }),\n\t\tlastName: z.string({ required_error: 'Last name is required' }).min(1, { message: 'Last name is required' }),\n\t\temail: z\n\t\t\t.string({ required_error: 'Email is required' })\n\t\t\t.min(1, { message: 'Email is required' })\n\t\t\t.email({ message: 'Invalid email' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password is required' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\nexport const verifyEmailSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n})\n",
      "type": "registry:example",
      "target": "~/validators/auth.ts"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
